package beakjoon_algorism_DFS;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

/*
 * 알파벳
 *  1. 세로 R, 가로 C입력받음.
 *  2. 전역변수 char[][] alphabet 작성.
 *  3. alphabet에 값 입력받음.
 *  4. boolean[26] check작성.
 *  5. count하는 dfs매소드 작성. 
 */
public class Problem_01987 {
	
	public static int[][] alphabet;
	public static boolean[] check = new boolean[26];
	public static int ans = 0;
	public static int R, C;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		alphabet = new int[R][C];
		
		for(int i = 0; i < R; i++) {
			String str = br.readLine();
			for(int j = 0; j < C; j++) {
				alphabet[i][j] = str.charAt(j) - 'A';
			}
		}
		
		dfs(0, 0, 0);
		
		bw.write(ans + "\n");
		bw.flush();
		bw.close();
		br.close();
		
	}
	
	public static void dfs(int x, int y, int count) {
		int[] dx = {1, 0, -1, 0};
		int[] dy = {0, 1, 0, -1};
		
		if(check[alphabet[x][y]]) {
			ans = Math.max(ans, count);
			return;
		}
		else {
			check[alphabet[x][y]] = true;
			for(int i = 0; i < 4; i++) {
				int X = x + dx[i];
				int Y = y + dy[i];
				
				if(X >= 0 && X < R && Y >= 0 && Y < C) {
					dfs(X, Y, count + 1);
				}
			}
			
			check[alphabet[x][y]] = false;
			
		}
		
	}

}